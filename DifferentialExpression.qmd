---
title: "Detailed_Analysis_of_Differential_Expression"
author: "Bernd Daller"
format: 
  html:
    code-fold: true
    embed-resources: true
execute:
  warning: false    # Suppress warnings
  error: false      # Suppress errors
  message: false    # Suppress messages
  fig-width: 15      # Set global figure width to 8
  fig-height: 10     # Set global figure height to 8
params:
  strain: 73
  nfcore_output_Path: "nf_core_output"
editor: visual
---

## Load Libraries and Data / Define Paths

```{r Load libraries, echo=FALSE}
library(here)
source(file.path(here(), "Libraries.R"))

# Process metadata
metadata <- openxlsx::read.xlsx(file.path(here(), "Data","metadata.xlsx"))
metadata$Genotype_CHX <- paste(metadata$Genotype, metadata$CHX, sep = "_")
metadata <- metadata %>%
  filter(Strain == params$strain) %>%
  mutate(CHX = factor(CHX)) %>%
  mutate(across(where(is.character), as.factor))
metadata$Genotype <- relevel(metadata$Genotype, ref = "WT")
metadata$CHX <- relevel(metadata$CHX, ref = "0")


# Define relevant Paths 
# Output Path
resultsPath <- file.path(here(), "output", paste0("Strain_",params$strain)) 
if (!dir.exists(resultsPath)) {
  dir.create(resultsPath, recursive = T)
}

# Path containing Salmon quant.sf files
quant_files<- list.files(params$nfcore_output_Path, pattern = "quant.sf$", full.names = T,recursive = T)
quant_files<-grep(params$strain, quant_files, value = T) # filter for strain
sample_names<-basename(dirname(quant_files))
names(quant_files) <- sample_names


# Path containing Bakta annotated tsv files
Bakta_tsv_file <- list.files(file.path(here(), "Data", "Bakta_annotated_files", paste0("Strain_",params$strain)), full.names = T,pattern=".tsv",recursive = T)

# Path containing OrgDbs 
OrgDBPath <- file.path(here(), "OrgDbs")
OrgDb <- grep(params$strain, list.files(OrgDBPath, pattern = "org.*.db", full.names = F), value = T)


#Define color palette
strain_colors <- list(
  '93' = c("WT_0" = "#b3b0aa", "WT_125" = "#74726a", "Adapted_0" = "#BFFCC6", "Adapted_125" = "#228B22"),
  '73' = c("WT_0" = "#b3b0aa", "WT_125" = "#74726a", "Adapted_0" = "#FFCCE6", "Adapted_125" = "#cd3363"),
  '78' = c("WT_0" = "#b3b0aa", "WT_125" = "#74726a", "Adapted_0" = "#B3D7FF", "Adapted_125" = "#4D85BD")
)
Genotype_CHX.colour <- strain_colors[[as.character(params$strain)]]
```

## Helper Functions

```{r Theme}
# Define a custom theme for ggplot2
theme_custom <- function() {
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1,size = 12,lineheight = 0.9,face = "plain"),
    axis.text.y = element_text(size = 12,lineheight = 0.9,face = "plain"),
    legend.text = element_text(size = 12,lineheight = 0.9),
    legend.title = element_text(size = 12,lineheight = 0.9,face = "bold"),
    axis.title = element_text(size = 14,lineheight = 0.9,face = "plain"),
    plot.title = element_text(size = 12,lineheight = 0.9,face = "plain"),
    plot.background = element_rect(fill = "#FFFFFF", colour = NA),
    legend.background = element_rect(fill = "#FFFFFF", linewidth = 0.5, linetype = "blank")
  )
}
```


Process COG Informations

```{r COG Information Processing}
exchangeCOGValues <- function(df) {
  # Ensure the dataframe has the columns we need
  if (!("COG" %in% names(df)) || !("COG_category" %in% names(df))) {
    stop("The dataframe does not have the required columns (COG, COG_category).")
  }

  # Find rows where COG_category contains "COG"
  rowsToExchange <- grepl("COG", df$COG_category)

  # Exchange values for those rows
  temp <- df$COG[rowsToExchange]
  df$COG[rowsToExchange] <- df$COG_category[rowsToExchange]
  df$COG_category[rowsToExchange] <- temp
  return(df)
}
```

Process and save DESeq results

```{r Process DESeq Results}
processDeseq <- function(res, comparison, resultsPath, postfix = "", GeneInfos = NULL, by = c("gene", "reference")) {
  if (!dir.exists(file.path(resultsPath, comparison))) {
    dir.create(file.path(resultsPath, comparison), recursive = T)
  }

  # Convert DESeq results to a data frame and arrange by padj
  all <- res %>%
    as.data.frame() %>%
    arrange(padj)
  all$gene <- gsub("\\..*", "", rownames(all))
  all$comparison <- comparison

  # Optionally merge with gene information
  if (!length(GeneInfos) == 0) {
    all <- merge(as.data.frame(all), GeneInfos, by.x = by[1], by.y = by[2], sort = F, all.x = T, all.y = F)
  }

  # Save full DESeq results
  openxlsx::write.xlsx(all, file.path(resultsPath,comparison, paste0(comparison, "_Differential_Expression_all", postfix, ".xlsx")), rowNames = F)

  # Filter significant results (padj < 0.05)
  fdr <- res %>%
    as.data.frame() %>%
    filter(padj < 0.05) %>%
    arrange(desc(log2FoldChange))

  if (nrow(fdr) == 0) {
    openxlsx::write.xlsx(fdr, file.path(resultsPath,comparison, paste0(comparison, "_Differential_Expression_fdr0.05", postfix, ".xlsx")), rowNames = F)
    return(fdr)
  } else {
    fdr$gene <- gsub("\\..*", "", rownames(fdr))
    fdr$comparison <- comparison
    if (!length(GeneInfos) == 0) {
      fdr <- merge(as.data.frame(fdr), GeneInfos, by.x = by[1], by.y = by[2], sort = F, all.x = T, all.y = F)
    }
    openxlsx::write.xlsx(fdr, file.path(resultsPath,comparison, paste0(comparison, "_Differential_Expression_fdr0.05", postfix, ".xlsx")), rowNames = F)
    return(fdr)
  }
}

```

Create Volcano Plot

```{r VulcanoPlot}
MyVolcano <- function(x, removePattern = "_.*") {
  y <- read_xlsx(x)

  if (length(colnames(y)) < 2) {
    print("nothing happened here")
    return(NA)
  }

  # Extract name, title, and comparison from filename
  name <- gsub("\\.xlsx", "", basename(x))
  title <- gsub("_Differential_Expression.*", "", name)
  comparison <- gsub(removePattern, "", name)
  comparisons <- strsplit(comparison, "\\.vs\\.")[[1]]

  # Prepare annotations for the plot
  annotations <- data.frame(
    xpos = c(-Inf, Inf),
    ypos = c(Inf, Inf),
    annotateText = c(paste0("Higher expression in: ", comparisons[2]), paste0("Higher expression in: ", comparisons[1])),
    hjustvar = c(-0.1, 1),
    vjustvar = c(1, 1)
  )

  y <- y[, c("gene_id", "pvalue", "log2FoldChange", "pvalue")]
  y <- y[complete.cases(y), ]
   
  # Select top and bottom 20 genes by log2FoldChange
  selected_genes <- y[y$log2FoldChange < (-1), ]
  bottom_genes <- selected_genes[order(selected_genes$pvalue), ] %>% head(10)
  selected_genes <- y[y$log2FoldChange > 1, ]
  top_genes <- selected_genes[order(selected_genes$pvalue), ] %>% head(10)
  
  #avoid duplicated gene_ids
  y[["gene_id"]][duplicated(y[["gene_id"]])] <-paste(y[["gene_id"]][duplicated(y[["gene_id"]])],seq_along(y[["gene_id"]][duplicated(y[["gene_id"]])]))

  # Generate Volcano Plot
  plot <- EnhancedVolcano(y,
    lab = y[["gene_id"]],
    x = "log2FoldChange",
    y = "pvalue",
    title = NULL,
    axisLabSize = 12,
    labSize = 4,
    selectLab = c(top_genes$gene_id, bottom_genes$gene_id),
    legendLabels = c("NS", expression(Log[2] ~ FC ~ " > 2"), "FDR < 0.05", expression("FDR < 0.05" ~ and ~ log[2] ~ FC)),
    caption = NULL,
    subtitle = NULL,
    drawConnectors = TRUE
  )

  # Add annotations
  plot_significant <- plot +
    geom_label(data = annotations, size = 3, aes(x = xpos, y = ypos, hjust = hjustvar, vjust = vjustvar, label = annotateText))

  return(plot_significant)
}

```

Create Normalized Counts Plot

```{r PlotCounts}
plotNormalizedValues <- function(DeTable, res, comparison, intgroup = c("Treatment", "Celltype"), x_value, facet, selectedGenes) {
  DeTable <- read_xlsx(DeTable)
  if (length(colnames(DeTable)) < 2) {
    print("nothing happened here")
    return(NA)
  }
  facet <- ensym(facet)

  sapply(selectedGenes, function(genetype) {
    title <- genetype
    DeTable <- DeTable %>%
      arrange(desc(log2FoldChange)) %>%
      filter(`#Sequence Id` == "contig_1")
    locus <- DeTable[(grepl(genetype, DeTable$"gene", fixed = T) | grepl(genetype, DeTable[, "gene_id"], fixed = T)) & DeTable$log2FoldChange > 0.05, "gene"]
    title <- DeTable[(grepl(genetype, DeTable$"gene", fixed = T) | grepl(genetype, DeTable[,  "gene_id"], fixed = T)) & DeTable$log2FoldChange > 0.05, "gene_id"]
    wrapped_title <- sapply(title, function(x) paste(strwrap(x, width = 40), collapse = "\n"))

    sapply(locus, function(x) {
      FoldChange <- format(as.numeric(DeTable[DeTable$"gene" == x, "log2FoldChange"]), digits = 2)
      Padj <- format(as.numeric(DeTable[DeTable$"gene" == x, "padj"]), digits = 2)
      Counts <- plotCounts(dds, x, intgroup = intgroup, returnData = T, transform = F)
      Counts <- merge(Counts, metadata[, !colnames(metadata) %in% colnames(Counts)], by.x = "row.names", by.y = "Sample", all.x = T, all.y = F)

      Counts$count <- Counts$count - 0.5
      p <- ggplot(Counts, aes(x = CHX, y = count, shape = Genotype, color = Genotype_CHX, fill = Genotype_CHX)) +
        stat_summary(fun.y = mean, geom = "crossbar", size = 0.5, aes(group = Genotype_CHX)) + # interaction(as.factor(CHX), )
        geom_jitter(
          color = "black", ,
          size = 4,
          position = position_dodge2(width = 0.3)
        ) +
        facet_wrap(~Genotype) +
        theme_bw()+ theme_custom() +
        scale_shape_manual(values = c(21,24 )) +
        scale_fill_manual(values = Genotype_CHX.colour) +
        scale_color_manual(values = Genotype_CHX.colour) +
        guides(
          fill = guide_legend(override.aes = list(size = 5, linetype = c(0, 0, 0, 0), shape = c(17, 17,16, 16), color = c(Genotype_CHX.colour[order(names(Genotype_CHX.colour))]), fill = c(NA, NA, NA, NA))),
          shape = "none", color = "none"
        ) +
        labs(title = wrapped_title) +
        theme(plot.title = element_text(size = 12))+
        expand_limits(y = c(0, 10))
      return(p)
    }, simplify = F)
  })
}
```

ClusterProfiler GO Enrichment

```{r ClusterProfiler GO Enrichment}
GOenriched_Clusterprofiler <- function(input_path, output_path = NULL, ont, OrgDb) { # "BP""MF,returngse=F

  name <- gsub("\\.xlsx", "", basename(input_path))
  DE_table <- read_xlsx(input_path)
  DE_table <- DE_table[!duplicated(DE_table["gene_id"]), ]

  if (length(colnames(DE_table)) < 1) {
    print("nothing happened here")
    return(NA)
  }

  DE_table <- DE_table %>% arrange(desc(.data[["log2FoldChange"]]))
  genes <- DE_table %>% dplyr::pull(.data[["log2FoldChange"]], "gene_id")

  genes <- genes[!is.na(names(genes)) & !is.na(genes)]
  if ("comparison" %in% colnames(DE_table)) {
    comparison <- unique(DE_table$comparison)
  } else {
    (
      comparison <- ""
    )
  }

  sample_name <- gsub("\\.xlsx", "", basename(input_path))

  #  check input ------------------------------------------------------------


  if (is.null(output_path)) {
    output_path <- dirname(input_path) # can be changed when Pairwise_ MAST is removed as additional directory
  }

  if (!dir.exists(file.path(output_path, "GO_GSEA"))) {
    dir.create(file.path(output_path, paste0("GO_GSEA_", ont)), recursive = T, showWarnings = F)
  }

  outpath <- file.path(output_path, paste0("GO_GSEA_", ont)) # ,regulation
  if (!dir.exists(file.path(outpath))) {
    dir.create(outpath, recursive = T, showWarnings = F)
  }
  gse <- tryCatch(
    {
      gse <- clusterProfiler::gseGO(
        geneList = genes,
        ont = ont,
        eps = 0,
        keyType = "SYMBOL",
        minGSSize = 2,
        maxGSSize = 500,
        pvalueCutoff = 0.05,
        verbose = F,
        OrgDb = OrgDb,
        pAdjustMethod = "BH"
      )
      saveRDS(gse, file = file.path(outpath, paste0(sample_name, "GO_GSEA.rds")))
      gse
    },
    error = function(cond) {
      print(paste0("error occured during enrichGO"))
      print(cond)
      return(NA)
    }
  )
 if(inherits(gse, "gseaResult")){
  # Load the ontology
  do_not_annotate <- get_ontology(file.path(here(), "Data", "GO_Check", "gocheck_do_not_annotate.obo"))
  goBasic <- get_ontology(file.path(here(), "Data", "GO_Check", "go-basic.obo"))
  obsolete <- goBasic$id[goBasic$obsolete]

  fine <- gse@result[!gse@result$ID %in% c(obsolete, do_not_annotate$id), ]

  gse@result <- fine

  gse2 <- simplify(gse)
  write.xlsx(gse, file = file.path(outpath, paste0(sample_name, "_GSEA.xlsx")))
  write.xlsx(gse2, file = file.path(outpath, paste0(sample_name, "_GSEA_nonRedundant.xlsx")))
  return(gse2)}
  else{
    return(gse)
  }
}
```

# Process Gene Informations and GO Annotations

```{r Process Gene Informations and GO Annotations}
# Load Bakta TSV file, skipping the first 5 lines.
Bakta_tsv <- read_tsv(Bakta_tsv_file, skip = 5)

# Unnest DbXrefs: Convert the DbXrefs column into a list,
# splitting entries separated by commas. Then unnest the list to create one row per DbXref.
data_long <- Bakta_tsv %>%
  mutate(DbXrefs = strsplit(as.character(DbXrefs), ",\\s*")) %>%
  unnest(DbXrefs)

# Define a function to replace the last digits in GO annotations with a given set of digits.
# This is used to standardize or fix specific GO term annotations.
replace_last_digits <- function(go, num) {
  n <- nchar(num)  # Number of digits in the replacement number
  substr(go, 1, nchar(go) - n) <- substr(go, 1, nchar(go) - n)  # Modify GO term by removing last 'n' digits
  paste0(substr(go, 1, nchar(go) - n), num)  # Append the new 'num' digits to the truncated GO term
}

# Search for the correct Pannzer output file based on strain identifier, searching recursively in the GO_Pannzer2 folder.
Pannzer <- list.files(file.path(here(), "Data", "GO_Pannzer2"), pattern = paste(params$strain), recursive = T, full.names = T)
# Narrow down to the specific Pannzer file containing "GO_strain" for GO annotations.
Pannzer <- grep("GO_strain", Pannzer, value = T)

# Read GO annotations from the Pannzer output file. Here we assume the GO annotations are stored as tab-delimited (.tsv).
GOannotations <- read.csv(Pannzer, sep = "\t")
# Standardize GO annotations by appending GO:0000000 as a placeholder.
GOannotations$GO <- paste("GO:0000000")
# Replace the placeholder with actual GO terms by using the function defined earlier.
GOannotations$GO <- replace_last_digits(GOannotations$GO, GOannotations$goid)

# Select only relevant columns (qpid as locus tag and GO annotation).
Pannzer_GO <- GOannotations[c("qpid", "GO")]
colnames(Pannzer_GO) <- c("Locus Tag", "DbXrefs")  # Rename columns to match those in the existing dataset.

# Identify new columns from the Bakta TSV that are not present in Pannzer_GO and add them to Pannzer_GO with NA values.
newcols <- colnames(data_long)[!colnames(data_long) %in% colnames(Pannzer_GO)]
Pannzer_GO[newcols] <- NA

# Combine the Pannzer GO data with the original Bakta data, ensuring uniqueness based on Locus Tag and DbXrefs.
# The distinct function is used to avoid duplicate rows.
data_long <- rbind(data_long, Pannzer_GO) %>%
  distinct(DbXrefs, pick(contains("Locus")), .keep_all = TRUE)

# Split DbXrefs column into separate Database and Reference columns using regular expressions.
# Database is the text before the colon, Reference is the text after.
data_long <- data_long %>%
  mutate(
    Database = sub(":.*", "", DbXrefs),
    Reference = sub(".*:", "", DbXrefs)
  ) %>%
  dplyr::select(-DbXrefs)  # Remove the original DbXrefs column after splitting.

# Group by Locus and Database, then concatenate unique references within each group.
# This condenses multiple entries per locus and database pair into a single row.
data_grouped <- data_long %>%
  group_by(across(contains("Locus")), Database) %>%
  summarise(Reference = paste(unique(Reference), collapse = "; "), .groups = "drop") %>%
  left_join(data_long[!colnames(data_long) %in% "Reference"], by = c("Locus Tag", "Database")) %>%
  distinct(Database, Reference, pick(contains("Locus")), .keep_all = TRUE)

# Reshape the data from long to wide format, creating one row per Locus Tag and one column per database (wide format).
# The original Bakta_tsv is joined back to ensure all relevant columns are included in the final output.
data_wide <- data_grouped %>%
  pivot_wider(id_cols = "Locus Tag", names_from = Database, values_from = Reference) %>%
  left_join(Bakta_tsv[!colnames(Bakta_tsv) %in% c("DbXrefs")], by = c("Locus Tag")) %>%
  distinct()

# Modify the GO column by appending the prefix "GO:" to GO annotations, converting semicolon-delimited entries to comma-separated values.
data_wide$GO <- ifelse(is.na(data_wide$GO), NA, paste0("GO:", gsub("; ", ", GO:", data_wide$GO)))

# Final preparation of GeneInfos:
# Split the COG column into separate COG and COG_category columns based on semicolons.
# Then process gene locus and gene_id fields, preferring gene names where available, falling back on locus tags or product names.
GeneInfos <- data_wide%>%
  mutate(across(where(is.character), as.factor)) %>%
  separate_wider_delim(COG, delim = ";", names = c("COG", "COG_category")) %>%
  exchangeCOGValues() %>%
  mutate(gene_locus = ifelse(!is.na(Gene), paste0(Gene), paste0(`Locus Tag`))) %>%
  mutate(gene_id = ifelse(!is.na(Gene), paste0(Gene), paste0(Product))) %>%
  dplyr::select(gene_id, everything())  # Final column arrangement with gene_id as the first column.

```

# Strain `r params$strain`

## PCA Overview

```{r PCA Overview}
# quant_files
# # Import data using tximport
tx2gene_file<-list.files(file.path(params$nfcore_output_Path),pattern = "tx2gene.tsv",full.names = T)
tx2gene_file<-grep(params$strain, tx2gene_file, value = T) # filter for strain
txtogene <- readr:::read_tsv(tx2gene_file, col_names = F)
tx2gene <- txtogene %>% dplyr::select(-X1)
colnames(tx2gene) <- c("TXNAME", "GENEID")



txi <- tximport(files = quant_files, type = "salmon", txOut = T, tx2gene = tx2gene)

# Create a DESeqDataSet
dds <- DESeqDataSetFromTximport(txi,
  colData = metadata,
  design = ~ Genotype + CHX + Genotype:CHX
)

# Run the differential expression analysis
dds <- DESeq(dds)
# Obtain normalized counts
normalized_counts <- counts(dds, normalized = TRUE)

# Save the DESeq object
saveRDS(dds, file.path(resultsPath, "dds.rds"))

# extract vsn normalized Data
vsd <- as.data.frame(assay(vst(dds, blind = T)))

PCA<-prcomp(t(vsd))

# Plot PCA
plot_pca <- autoplot(PCA, data = metadata, colour = "Genotype_CHX", shape = "Genotype", size = 5) +theme_bw()+
  theme_custom() +
  theme(
    legend.position = "top",
    legend.direction = "horizontal",
    legend.box = "vertical",
    legend.box.spacing = unit(0.5, "lines"),
    legend.title = element_text(hjust = 0.5)
  ) +
  guides(
    colour = guide_legend(order = 1,title.position = "top", title.hjust = 0,legend.title.align=0, override.aes = list(size = 3, linetype = c(0, 0, 0, 0), shape = c(17, 17, 16, 16))),
    shape = "none"
  ) +
  scale_colour_manual(values = Genotype_CHX.colour) +
  geom_mark_ellipse(aes(colour = Genotype_CHX)) +
  expand_limits(x = c(-0.7, 0.7), y = c(-0.7, 0.7))

plot_pca
```

## The Effect of Treatment in Mutated Strains

```{r DEseq CHX125.vs.Untreated_inAdaptedcells}
res_CHXresponse <- results(dds, list(c("CHX_125_vs_0", "GenotypeAdapted.CHX125")))
res_CHXresponse <- lfcShrink(dds, coef = list(c("CHX_125_vs_0", "GenotypeAdapted.CHX125")), type = "ashr", res = res_CHXresponse)

fdr <- processDeseq(res_CHXresponse, resultsPath = resultsPath, comparison = "CHX125.vs.Untreated_inAdaptedcells", GeneInfos = GeneInfos, by = c("gene", "Locus Tag"))
```

### Volcano Overview

```{r Plot Vulcano CHX125.vs.Untreated_inAdaptedcells}
De_all_CHXresponse <- list.files(file.path(resultsPath, "CHX125.vs.Untreated_inAdaptedcells"), pattern = "_Differential_Expression_all.xlsx", full.names = T)
Volcano_CHXresponse <- MyVolcano(De_all_CHXresponse)
Volcano_CHXresponse
```

### Differential Expression Table

```{r DEtable CHX125.vs.Untreated_inAdaptedcells}
if (nrow(fdr) == 0) {
  print("No significant genes found")
} else {
  DT::datatable(fdr[, c("gene", "gene_id", "baseMean", "log2FoldChange", "pvalue", "padj", "COG", "COG_category", "GO", "comparison")],
    extensions = "Buttons",
    options = list(
      dom = "Bfrtip",
      scrollX = TRUE,
      buttons = c("copy", "csv", "excel", "pdf", "print"),
      pageLength = 10,
      autoWidth = TRUE
    ), rownames = F, filter = "top", selection = "single", editable = T
  ) %>%
    formatRound(columns = c("baseMean", "log2FoldChange"), digits = 2) %>% # Limit baseMean and log2FoldChange to 2 decimals
    formatSignif(columns = c("pvalue", "padj"), digits = 3) # Keep pvalue and padj in scientific notation
}
```

### Gene Set Enrichment Analysis

```{r GSEA CHX125.vs.Untreated_inAdaptedcells}
gse_CHXresponse <- GOenriched_Clusterprofiler(
  input_path = De_all_CHXresponse,
  ont = "BP",
  OrgDb = OrgDb
)
```

## Expression Pattern of CHX adapted strains compared to wild-type Strains *without* exposure to Chlorhexidine

```{r DEseq Adapted.vs.WT_inCHX0Conditions}

res_MutatationEffect_CHX0 <- lfcShrink(dds, contrast = c("Genotype", "Adapted", "WT"), type = "ashr")
fdr <- processDeseq(res_MutatationEffect_CHX0, resultsPath = resultsPath, comparison = "Adapted.vs.WT_inCHX0Conditions", GeneInfos = GeneInfos, by = c("gene", "Locus Tag"))
```

### Volcano Overview

```{r Plot Vulcano Adapted.vs.WT_inCHX0Conditions}
De_all_MutatationEffect_CHX0 <- list.files(file.path(resultsPath, "Adapted.vs.WT_inCHX0Conditions"), pattern = "_Differential_Expression_all.xlsx", full.names = T)
Volcano_MutatationEffect_CHX0 <- MyVolcano(De_all_MutatationEffect_CHX0, removePattern = "_inCHX0Conditions.*")
Volcano_MutatationEffect_CHX0
```

### Differential Expression Table

```{r DEtable Adapted.vs.WT_inCHX0Conditions}
if (nrow(fdr) == 0) {
  print("No significant genes found")
} else {
  DT::datatable(fdr[, c("gene", "gene_id", "baseMean", "log2FoldChange", "pvalue", "padj", "COG", "COG_category", "GO", "comparison")],
    extensions = "Buttons",
    options = list(
      dom = "Bfrtip",
      scrollX = TRUE,
      buttons = c("copy", "csv", "excel", "pdf", "print"),
      pageLength = 10,
      autoWidth = TRUE
    ), rownames = F, filter = "top", selection = "single", editable = T
  ) %>%
    formatRound(columns = c("baseMean", "log2FoldChange"), digits = 2) %>% # Limit baseMean and log2FoldChange to 2 decimals
    formatSignif(columns = c("pvalue", "padj"), digits = 3) # Keep pvalue and padj in scientific notation
}
```

### Gene Set Enrichment Analysis

```{r GSEA Adapted.vs.WT_inCHX0Conditions}
gse_MutatationEffect_CHX0 <- GOenriched_Clusterprofiler(
  input_path = De_all_MutatationEffect_CHX0,
  ont = "BP",
  OrgDb = OrgDb
)
```

## Expression Pattern of CHX adapted strains compared to wild-type Strains *with* exposure to Chlorhexidine

```{r DEseq Adapted.vs.WT_inCHX125Conditions}
res_MutatationEffect_CHX125 <- results(dds, list(c("Genotype_Adapted_vs_WT", "GenotypeAdapted.CHX125")))
res_MutatationEffect_CHX125 <- lfcShrink(dds, list(c("Genotype_Adapted_vs_WT", "GenotypeAdapted.CHX125")), res = res_MutatationEffect_CHX125, type = "ashr")
fdr <- processDeseq(res_MutatationEffect_CHX125, resultsPath = resultsPath, comparison = "Adapted.vs.WT_inCHX125Conditions", GeneInfos = GeneInfos, by = c("gene", "Locus Tag"))
```

### Volcano Overview

```{r Plot Vulcano Adapted.vs.WT_inCHX125Conditions}
De_all_MutatationEffect_CHX125 <- list.files(file.path(resultsPath, "Adapted.vs.WT_inCHX125Conditions"), pattern = "_Differential_Expression_all.xlsx", full.names = T)
Volcano_MutatationEffect_CHX125 <- MyVolcano(De_all_MutatationEffect_CHX125, removePattern = "_inCHX0Conditions.*")
Volcano_MutatationEffect_CHX125
```

### Differential Expression Table

```{r DEtable Adapted.vs.WT_inCHX125Conditions}
if (nrow(fdr) == 0) {
  print("No significant genes found")
} else {
  DT::datatable(fdr[, c("gene", "gene_id", "baseMean", "log2FoldChange", "pvalue", "padj", "COG", "COG_category", "GO", "comparison")],
    extensions = "Buttons",
    options = list(
      dom = "Bfrtip",
      scrollX = TRUE,
      buttons = c("copy", "csv", "excel", "pdf", "print"),
      pageLength = 10,
      autoWidth = TRUE
    ), rownames = F, filter = "top", selection = "single", editable = T
  ) %>%
    formatRound(columns = c("baseMean", "log2FoldChange"), digits = 2) %>% # Limit baseMean and log2FoldChange to 2 decimals
    formatSignif(columns = c("pvalue", "padj"), digits = 3) # Keep pvalue and padj in scientific notation
}
```

### Gene Set Enrichment Analysis

```{r GSEA Adapted.vs.WT_inCHX125Conditions}
gse_MutatationEffect_CHX125 <- GOenriched_Clusterprofiler(
  input_path = De_all_MutatationEffect_CHX125,
  ont = "BP",
  OrgDb = OrgDb
)
```

# Create Figures in Paper

### Heatmap of Selected Genes

```{r Create Heatmap}
# Load an Excel file with mutation effect data from the first sheet
Detable <- read_xlsx(De_all_MutatationEffect_CHX0, sheet = 1)

# Filter the dataset to select rows where the sequence ID is 'contig_1' and log2FoldChange > 1
# Then, sort the results by p-value and select the top 10 rows
# Finally, select only the 'gene' and 'gene_id' columns
out <- Detable %>%
  filter(`#Sequence Id` == "contig_1" & log2FoldChange > 1) %>%
  arrange(pvalue) %>%
  head(10) %>%
  dplyr::select(gene, gene_id)

# Extract gene names from the filtered data
topGenes <- out %>% dplyr::pull(gene)

# Extract and normalize the variance-stabilized data (vst) for the top genes
vst_sig <- vsd[topGenes, ]
heat <- t(scale(t(vst_sig)))  # Standardize each row (z-score normalization)

# Modify the rownames of the heatmap matrix by collapsing 'out' data into strings
rownames(heat) <- apply(out, 1, paste, collapse = " ")

# Wrap row names to a width of 60 characters for better display in the heatmap
wrapped_rownames <- sapply(rownames(heat), function(x) paste(strwrap(x, width = 60), collapse = "\n"))

# Assign the wrapped row names back to the heatmap data
rownames(heat) <- wrapped_rownames

# Define column annotations for the heatmap using metadata, showing the 'Genotype' and 'CHX' columns
col_annot <- ComplexHeatmap::HeatmapAnnotation(df = metadata[, c("Genotype", "CHX")], show_legend = TRUE,annotation_legend_param=list(title_gp = gpar(fontsize = 12, fontface = "plain"),labels_gp = gpar(fontsize = 12)))

# Define annotation colors for 'Treatment' column
annotation_colors <- list("Treatment" = Genotype_CHX.colour)

# Prepare a dataframe for annotation column and assign the name 'Treatment'
annotationcolumn <- as.data.frame(metadata[, "Genotype_CHX"])
colnames(annotationcolumn) <- "Treatment"

# Define the heatmap annotation, customize legend and appearance
col_annotation <- HeatmapAnnotation(
  df = annotationcolumn, col = annotation_colors, annotation_name_side = "right", show_legend = T,
  annotation_legend_param = list(
    "Treatment" = list(
      title = "Genotype_CHX",   # Legend title
      direction = "horizontal", # Legend direction
      nrow = 1,                 # Number of rows for legend
      title_gp = gpar(fontsize = 12, fontface = "bold"),
      labels_gp = gpar(fontsize = 12)
    )
  ),
  which = "col"
)

# Create the heatmap using ComplexHeatmap, specify annotation, ordering, and clustering preferences
ht <- ComplexHeatmap::Heatmap(
  heat,
  name = "Normalized gene counts", top_annotation = col_annotation, 
  cluster_rows = F, cluster_columns = F, 
  column_order = order(metadata$Genotype_CHX),
  show_column_names = F, 
  row_dend_side = "left", 
  row_names_gp = gpar(fontsize = 12), 
  border = TRUE, 
  row_names_side = "right", 
  column_split = factor(c(rep("WT", 6), rep("Adapted", 6)), levels = c("WT", "Adapted")), 
  heatmap_legend_param = list(
    legend_direction = "horizontal",
    legend_width = unit(5, "cm"),                 # Number of rows for legend
      title_gp = gpar(fontsize = 12, fontface = "bold"),
      labels_gp = gpar(fontsize = 12)
  ), 
  row_names_max_width = max_text_width(rownames(heat), gp = gpar(fontsize = 12))
)

# Capture the heatmap expression in a grid for later plotting
heatmap <- grid::grid.grabExpr(
  ComplexHeatmap::draw(ht, heatmap_legend_side = "top", annotation_legend_side = "top", 
  align_heatmap_legend = "global_center", merge_legend = TRUE), 
  padding = unit(c(2, 100, 2, 100), "mm")
)
plot_grid(heatmap)

```

### Expression Plots for Selected Genes

```{r Create Counts Plots}
# Generate plots for selected genes and normalized values
selected_genes <- plotNormalizedValues(De_all_MutatationEffect_CHX0, res_MutatationEffect_CHX0, 
                                       intgroup = c("Genotype", "CHX"), 
                                       x_value = "Genotype", facet = "CHX", 
                                       comparison = "Adapted.vs.WT_inCHX0Conditions", 
                                       selectedGenes = topGenes[1:4])

# Extract the legend from one of the selected gene plots
legend_boxplots <- get_legend(selected_genes[[1]] + theme(legend.position = "bottom"))

# Create individual plots for selected genes without the legend
top <- lapply(seq_along(selected_genes), function(x) {
  y <- selected_genes[[x]]+ theme(legend.position = "none")
  return(y)
})

# Combine the selected gene plots into a grid with 2 columns
expression <- cowplot::plot_grid(plotlist = top, ncol = 2)+
  theme(plot.background = element_rect(fill = "#FFFFFF", colour = NA))
expression
```


### GO enrichment and CHX effect

```{r Create GSEA Plot}
# New facet label names for supp variable
supp.labs <- c("activated in adapted strains", "activated in WT strains")
names(supp.labs) <- c("activated", "suppressed")
GSE <- dotplot(gse_MutatationEffect_CHX0, showCategory = 5, split = ".sign") + coord_flip() + facet_grid(.sign ~ ., labeller = labeller(.rows = supp.labs)) +theme_custom()+ theme(legend.box = "horizontal", axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  expand_limits(x = c(0.2, 0.1))


right_side <- plot_grid(heatmap, expression, legend_boxplots, labels = c("C", "D"), label_size = 12, ncol = 1, rel_heights = c(1, 1.4, 0.1), scale = c(0.98)) 


left_side <- plot_grid(plot_pca, Volcano_MutatationEffect_CHX0 + theme(legend.position = "none", legend.text = element_text(size = 12)) + guides(color = guide_legend(override.aes = list(size = 1.5))), labels = c("A", "B"), label_size = 12, ncol = 1, rel_heights = c(1, 1.7), scale = c(0.98)) 
final_sample <- plot_grid(left_side, right_side, rel_widths = c(1, 1.2), label_size = 12, ncol = 2) 
final_sample <- plot_grid(final_sample, GSE, ncol = 1, rel_heights = c(3, 1.2), scale = c(1, 0.98), labels = c("", "E"))+ theme(plot.background = element_rect(fill = "#FFFFFF", colour = NA))

ggsave(final_sample, file = file.path(resultsPath, paste0("final_sample_GSE.svg")), width = 19, height = 22)
final_sample
```


```{r CHX Strain 93}
if (params$strain == 93) {
  Treatment_adapted <- MyVolcano(De_all_CHXresponse)
  Treatment_adapted

  GSE <- dotplot(gse_CHXresponse, showCategory = 5, split = ".sign") + facet_grid(. ~ .sign) + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
    expand_limits(x = c(0.1, 0.1))

  CHX_effect_93 <- plot_grid(
    plot_grid(Treatment_adapted + theme(legend.position = "none"), GSE, labels = c("A", "B"), scale = 0.98))+   
    theme(plot.background = element_rect(fill = "#FFFFFF", colour = NA))


  ggsave(CHX_effect_93, file = file.path(resultsPath, paste0("final_sample_GSE_OnlyTreatmenteffect.svg")), width = 15, height = 8)
  
  CHX_effect_93
}


```
