---
title: "Differential Gene Expression Analysis"
author: "Bernd Daller"
format: 
  html:
    code-fold: true
    embed-resources: true
execute:
  warning: false    # Suppress warnings
  error: false      # Suppress errors
  message: false    # Suppress messages

---


### Set File Paths and Load Data

```{r include=FALSE}
library(here)
source(file.path(here(), "Libraries.R"))

# Set the path for output data
ComparisonPath <- file.path(here(), "output", "CrossStrain_Analyis")
if (!dir.exists(ComparisonPath)) {
  dir.create(ComparisonPath)
}
# Load relevant FDR files for analysis
relevant_fdr <- list.files(file.path(here(), "output"), pattern = "fdr", full.names = TRUE, recursive = TRUE)

# # Filter files for specific comparison: Adapted vs WT in CHX condition
relevant <- grep("Adapted.vs.WT_inCHX", relevant_fdr, value = TRUE)
```

### Define Sample Groups and Color Assignments

```{r}
# Define color palette for object groups
colors <- c(
  "#B3D7FF", "#4D85BD", # Group 1: Pastel Blue
  "#FFCCE6", "#BA7A8F", # Group 2: Pastel Pink
  "#BFFCC6", "#228B22"
) # Group 3: Pastel Green

# Assign colors to each sample
object_colors <- setNames(
  colors,
  c(
    "S. salivarius_CHX0", "S. salivarius_CHX125",
    "S. vestibularis_CHX0", "S. vestibularis_CHX125",
    "S. mitis_CHX0", "S. mitis_CHX125"
  )
)

# Define sample names
samples <- c(
  "S. salivarius_CHX0", "S. salivarius_CHX125",
  "S. vestibularis_CHX0", "S. vestibularis_CHX125",
  "S. mitis_CHX0", "S. mitis_CHX125"
)

cog_names <- data.frame(
  A = "RNA processing and modification",
  B = "Chromatin structure and dynamics",
  C = "Energy production and conversion",
  D = "Cell cycle control and mitosis",
  E = "Amino acid transport and metabolism",
  "F" = "Nucleotide transport and metabolism",
  G = "Carbohydrate transport and metabolism",
  H = "Coenzyme transport and metabolism",
  I = "Lipid transport and metabolism",
  J = "Translation, ribosomal structure and biogenesis",
  K = "Transcription",
  L = "Replication and repair",
  M = "Cell wall/membrane biogenesis",
  N = "Cell motility",
  O = "Post-translational modification, protein turnover, chaperones",
  P = "Inorganic ion transport and metabolism",
  Q = "Secondary metabolites biosynthesis, transport, and catabolism",
  R = "General function prediction only",
  S = "Function unknown",
  "T" = "Signal transduction mechanisms",
  U = "Intracellular trafficking and secretion",
  V = "Defense mechanisms",
  W = "Extracellular structures",
  Y = "Nuclear structure",
  Z = "Cytoskeleton"
)
```


### Load Gene Data and Perform String Manipulations

```{r}
# Load gene data from the Excel files and process them
geneSet <- lapply(relevant, function(i) {
  # Read the DE table from the Excel file
  DE_table <- read_xlsx(i)

  # Extract the base name for the comparison
  name <- gsub("_Differential_Expression_fdr0.05.xlsx", "", basename(i))

  # Split the UniRef column into multiple components and clean the data
  DE_table <- DE_table %>%
    separate_wider_delim(UniRef, names = c("Uniref100", "Uniref50", "Uniref90"), delim = ";", too_few = "align_end", cols_remove = FALSE) %>%
    mutate(across(where(is.character), str_trim))

  # Handle missing Uniref50 and Uniref90 data
  DE_table$Uniref50 <- ifelse(is.na(DE_table$Uniref50), DE_table$Uniref90, DE_table$Uniref50)
  DE_table$Uniref90 <- ifelse(grepl("Uniref50", DE_table$Uniref90), NA, DE_table$Uniref90)

  # Extract the log fold change values and sort them
  test <- DE_table %>%
    dplyr::mutate("name" = name) %>%
    arrange(across(starts_with("log"))) %>%
    pull(starts_with("log"), Uniref50)

  # Clean the column names
  names(test) <- gsub(",", "__", names(test))

  return(test)
})
```

### Create Venn Diagrams for Upregulated and Downregulated Genes

```{r}
# Assign names to the gene sets
names(geneSet) <- samples

# Extract upregulated genes (log fold change > 0.5)
upregulated <- lapply(geneSet, function(x) {
  x <- x[x > 0.5]
  out <- unique(names(x))
  out <- out[!is.na(out)]
  return(out)
})

# Define subsets of upregulated genes
CHX0 <- upregulated[grepl("CHX0", names(upregulated))]
CHX125 <- upregulated[grepl("CHX125", names(upregulated))]
names(CHX0) <- names(upregulated)[grepl("CHX0", names(upregulated))]
names(CHX125) <- names(upregulated)[grepl("CHX125", names(upregulated))]
```

### Generate UpSet Plots for Upregulated and Downregulated Genes

```{r}
# Generate UpSet plot for upregulated genes
m <- as.matrix(make_comb_mat(upregulated, mode = "distinct"))

upPlot <- ComplexHeatmap::UpSet(m,
  set_order = names(object_colors),
  row_names_gp = gpar(fontsize = 5),
  column_names_gp = gpar(fontsize = 5),lwd = 0.5,
  comb_order = order(comb_size(m), decreasing = TRUE),
  pt_size = unit(3, "mm"),
  bg_pt_col = object_colors,
  bg_col = rev(object_colors),
  comb_col = c("#b69978", "#927552", "#72583d", "#5a3f31", "#2d2722", "black")[comb_degree(m)],
  top_annotation = upset_top_annotation(m, height = unit(3, "cm"), axis_param = list(gp = gpar(fontsize = 5)), annotation_name_gp = gpar(fontsize = 6)),
  right_annotation = upset_right_annotation(m,width = unit(1.5, "cm"),
    gp = gpar(fill = object_colors),
    annotation_name_gp = gpar(fontsize = 6),
    annotation_name_side = "top",
    axis_param = list(side = "top", gp = gpar(fontsize = 5))
  )
)
draw(upPlot)
```

### Downregulated Genes Analysis

```{r}
# Extract downregulated genes (log fold change < -0.5)
downregulated <- lapply(geneSet, function(x) {
  x <- x[x < -0.5]
  out <- unique(names(x))
  out <- out[!is.na(out)]
  return(out)
})

# Generate UpSet plot for downregulated genes
b <- as.matrix(make_comb_mat(downregulated, mode = "distinct"))

downPlot <- ComplexHeatmap::UpSet(b,
  set_order = names(object_colors),
  comb_order = order(comb_size(b), decreasing = TRUE),
  pt_size = unit(0.5, "mm"),
  bg_pt_col = object_colors,
  bg_col = rev(object_colors),
  comb_col = c("#b69978", "#927552", "#72583d", "#5a3f31", "#2d2722", "black")[comb_degree(b)],
  top_annotation = upset_top_annotation(b, height = unit(7, "cm")),
  right_annotation = upset_right_annotation(b,
    gp = gpar(fill = object_colors),
    annotation_name_side = "top",
    axis_param = list(side = "top")
  )
)
```

### Export Results to Excel Files

```{r}
# Export the overlap data for upregulated, downregulated, and absolute differences
openxlsx::write.xlsx(process_region_data(Venn(downregulated)),
  file.path(ComparisonPath, "Overlap_Downregulated_0.5.xlsx"),
  rowNames = FALSE
)

openxlsx::write.xlsx(process_region_data(Venn(upregulated)),
  file.path(ComparisonPath, "Overlap_Upregulated_0.5.xlsx"),
  rowNames = FALSE
)
```

### Extract common genes 

```{r}
overlap <- read_xlsx(file.path(ComparisonPath, "Overlap_Upregulated_0.5.xlsx"), col_names = T)
genes <- overlap$item[length(overlap$item)] %>%
  strsplit(",") %>%
  unlist() %>%
  trimws()
genes <- genes[!genes %in% c("hypothetical protein", "Phage protein") & !is.na(genes)]
common_genes <- gsub("__", ",", genes)

b <- as.matrix(make_comb_mat(downregulated, mode = "distinct"))

DE_table <- read_xlsx(relevant[1])
common <- DE_table[grepl(paste(c(extract_comb(m, "111111"), extract_comb(b, "111111")), collapse = "|"), DE_table$UniRef), ]
```


### COG Analysis

```{r}
# COG Analysis Function
MyCOG <- function() {
  # Load the differential expression data
  De_all <- list.files(file.path(resultsPath, comparison), pattern = "_Differential_Expression_all.xlsx", full.names = TRUE)
  De_all <- read_xlsx(De_all[1], sheet = 1)

  # Filter for complete cases and calculate the counts of COG categories
  De_all$COG_category[complete.cases(De_all$COG_category)] %>%
    trimws() %>%
    str_split("") %>%
    unlist() %>%
    table()

  # Identify upregulated COG categories (padj < 0.05, log2FoldChange > 0.5)
  upregulated <- De_all$COG_category[De_all$padj < 0.05 & De_all$log2FoldChange > 0.5 & complete.cases(De_all$COG_category)] %>%
    trimws() %>%
    str_split("") %>%
    unlist() %>%
    table() %>%
    as.data.frame()

  colnames(df_combined) <- c("COG_Category", "Count", "Regulation", "comparison")

  # Calculate total counts of upregulated and downregulated categories
  total_counts <- df_combined %>%
    summarize(Total = (De_all)) %>%
    ungroup() %>%
    pull(1)

  return(upregulated)
}
```

### Cluster Analysis

```{r}
# Perform cluster analysis across all relevant files
COG_all <- lapply(seq_along(relevant), function(i) {
  # Load each comparison file
  De_all <- read_xlsx(relevant[i])

  # Count total COG categories for all genes
  total_counts <- De_all$COG_category[complete.cases(De_all$COG_category)] %>% length()

  # Identify upregulated COG categories (padj < 0.05, log2FoldChange > 0.5)
  upregulated <- De_all$COG_category[De_all$padj < 0.05 & De_all$log2FoldChange > 0.5 & complete.cases(De_all$COG_category)] %>%
    trimws() %>%
    str_split("") %>%
    unlist() %>%
    table() %>%
    as.data.frame()

  # Identify downregulated COG categories (padj < 0.05, log2FoldChange < -0.5)
  downregulated <- De_all$COG_category[De_all$padj < 0.05 & De_all$log2FoldChange < -0.5 & complete.cases(De_all$COG_category)] %>%
    trimws() %>%
    str_split("") %>%
    unlist() %>%
    table() %>%
    as.data.frame()

  # Label upregulated and downregulated data
  upregulated$Regulation <- "Upregulated"
  downregulated$Regulation <- "Downregulated"

  # Combine the two data frames
  df_combined <- rbind(upregulated, downregulated)
  colnames(df_combined) <- c("COG_Category", "Count", "Regulation")

  # Calculate percentage of each category
  df_combined$Percentage <- with(df_combined, Count / total_counts * 100)

  # Convert COG letters to descriptive names (mapping required)
  df_combined$COG_Category_Name <- sapply(df_combined$COG_Category, function(x) cog_names[names(cog_names) == x])

  # Pivot data for easier plotting
  df_long <- df_combined %>%
    dplyr::select(COG_Category, Percentage, Regulation) %>%
    pivot_longer(cols = c("Percentage"), names_to = "Variable", values_to = "Value")

  # Generate comparison name
  df_long$comparison <- samples[i]

  return(df_long)
})

# Combine COG data from all comparisons
COG_long <- rbind(COG_all[[1]], COG_all[[2]], COG_all[[3]], COG_all[[4]], COG_all[[5]], COG_all[[6]])
```

### Radar Plots for COG Categories

```{r}
# Generate radar plots for upregulated genes by COG category
test <- COG_long %>%
  dplyr::select(-Variable) %>%
  filter(Regulation == "Upregulated") %>%
  na.omit() %>%
  group_by(COG_Category) %>%
  pivot_wider(names_from = COG_Category, values_from = Value) %>%
  ungroup() %>%
  select_if(~ !any(is.na(.)))

# Rename columns for clarity
colnames(test)[2] <- "group"

# Set correct factor levels for sample groups
test$group <- as.factor(gsub("_Differential_Expression_all.xlsx", "", test$group))
test$group <- factor(test$group, levels = c(
  "S. salivarius_CHX125", "S. salivarius_CHX0",
  "S. vestibularis_CHX125", "S. vestibularis_CHX0",
  "S. mitis_CHX125", "S. mitis_CHX0"
))

# Loop to create radar plots for each group
radarplots <- lapply(c("S. salivarius", "S. vestibularis", "S. mitis"), function(x) {
  group_colours <- object_colors[grepl(x, names(object_colors))]

  # Subset the data for each group
  ggradardata <- subset(test, grepl(x, test$group))

  # Generate the radar plot for upregulated genes
  radar_regulated <- ggradardata[ggradardata$Regulation == "Upregulated", -1] %>%
    ggradar(
      grid.label.size = 2,
      axis.label.size = 2,
      group.point.size = 2,
      legend.text.size = 5,
      grid.min = 0,
      grid.mid = max(ggradardata[, -c(1:2)]) / 6,
      grid.max = max(ggradardata[, -c(1:2)]) / 3,
      label.gridline.max = "25%",
      gridline.mid.colour = "black",
      label.gridline.min = "0%",
      label.gridline.mid = "10%",
      background.circle.colour = "#1A120B",
      # group.point.size = 1,
      group.line.width = 1,
      group.colours = group_colours,
      fill = TRUE, fill.alpha = 0.3, legend.position = "right"
    )

  # Extract and arrange legend with plot
  legend <- get_legend(radar_regulated  +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1, size = 2, lineheight = 0.9, face = "bold"),
      legend.box = "horizontal",
      legend.background = element_rect(fill = "#FAF9F6", linewidth = 0.5, linetype = "blank")
    ))
  plot_radar_list <- plot_grid(radar_regulated  + theme(legend.position = "none",plot.margin = unit(c(0, 0, 0, 0), "cm")), legend, ncol = 2)

  return(plot_radar_list)
})
radarplots
```


### COG Names Mapping

```{r ,fig.width=10, fig.height=10}
# Define a mapping of COG category letters to their descriptive names
cog_names <- cog_names %>% t()

# Split the COG categories into two sets for side-by-side comparison
cog_names_1 <- cog_names[colnames(test)[3:11], ] %>% as.matrix()
cog_names_1 <- cbind(colnames(test)[3:11], cog_names_1)

cog_names_2 <- cog_names[12:length(colnames(test))] %>% as.matrix()
cog_names_2 <- cbind(colnames(test)[12:length(colnames(test))], cog_names_2)

# Combine the two sets into a side-by-side table
sidebyside <- cbind(cog_names_1, cog_names_2)
rownames(sidebyside) <- NULL

# Generate a legend table for COG categories
legend <- ggtexttable(sidebyside,
  rows = NULL,  # Remove automatic row names
  theme = ttheme(
    base_colour = "black",
    base_size = 3,
    padding = unit(c(2, 2), "mm"), 
    tbody.style = tbody_style(
      size = 5.5,
      color = "black",
      fill = c("#FAF9F6"),
      hjust = as.vector(matrix(c(0.5, 0, 0.5, 0),
        ncol = ncol(sidebyside), nrow = nrow(sidebyside), byrow = TRUE
      )),
      x = as.vector(matrix(c(0.5, 0.01, 0.5, 0.01),
        ncol = ncol(sidebyside), nrow = nrow(sidebyside), byrow = TRUE
      ))
    )
  )
) %>%
  table_cell_font(row = c(1:nrow(sidebyside)), column = c(1, 3), face = "bold", size = 7) %>%
  tab_add_vline(at.column = c(2, 4), column.side = "left", from.row = 1, linetype = 2, linewidth = 0.5)


legend
# Combine radar plots and the COG category legend
plot_radar_list <- cowplot::plot_grid(plotlist = radarplots, ncol = 1)
plot_radar <- plot_grid(legend, plot_radar_list, ncol = 1, rel_heights = c(0.3, 1), axis = "tblr", byrow = FALSE)

```

### Antibiotic Resistance Analysis

```{r ,fig.width=10, fig.height=5}
# Load antibiotic resistance data from files
relevant_all <- list.files(file.path(here(), "output"), pattern = "all.xlsx", full.names = TRUE, recursive = TRUE)
relevant <- grep("Adapted.vs.WT_inCHX0", relevant_all, value = TRUE)
samples <- c("S. salivarius_CHX0", "S. vestibularis_CHX0", "S. mitis_CHX0")

# Load antibiotic resistance index and combined report
antibiotics <- readr::read_tsv(file.path(here(), "Data", "Antibiotic_Resistance", "hamronization_combined_report.tsv"))
antibiotics$locusID <- gsub("_1+$", "", antibiotics$input_sequence_id)

# Extract fold-change data for relevant genes and compare with resistance genes
FC <- lapply(seq_along(relevant), function(i) {
  DE_table <- read_xlsx(relevant[i])
  test <- DE_table %>%
    arrange(log2FoldChange) %>%
    dplyr::select(log2FoldChange, gene, gene_id, Gene)
  test$comparison <- samples[i]
  commontest <- test[test$gene %in% antibiotics$locusID, ]
  return(commontest)
})

# Combine results into a single dataframe
names(FC) <- samples
all_genes <- rbind(FC[[1]], FC[[2]], FC[[3]])
all_genes_infos <- merge(all_genes, antibiotics, by.x = c("gene"), by.y = c("input_sequence_id"))

# Summarize log2 fold changes by antibiotic gene class
antibiotica <- all_genes %>%
  dplyr::select(-gene) %>%
  group_by(gene_id, comparison) %>%
  summarise(meanlog2FoldChange = mean(log2FoldChange)) %>%
  ungroup() %>%
  arrange(meanlog2FoldChange)

# Merge antibiotic information
antibiotica_info <- merge(antibiotica, antibiotics[, c("gene_symbol", "drug_class")], by.x = c("gene_id"), by.y = c("gene_symbol"), all.x = TRUE, all.y = FALSE) %>%
  distinct(gene_id, comparison, meanlog2FoldChange, .keep_all = TRUE)
antibiotica <- antibiotica_info

# Reshape the data for visualization
df_wide <- reshape2::dcast(antibiotica, comparison ~ gene_id, value.var = "meanlog2FoldChange")
rownames(df_wide) <- df_wide$comparison
df_wide <- df_wide[, -1]

# Customize drug class names for the plot
firstup <- function(x) {
  x <- tolower(x)
  substr(x, 1, 1) <- toupper(substr(x, 1, 1))
  x
}

antibiotica$drug_class <- ifelse(is.na(antibiotica$drug_class), "NA", firstup(antibiotica$drug_class))
antibiotica$drug_class[1] <- "multi"
antibiotica$drug_class <- gsub(" antibiotic", "", antibiotica$drug_class)
antibiotica$drug_class <- as.factor(tolower(antibiotica$drug_class))

# Define shape for drug classes
drug_class_shapes <- c("fluoroquinolone" = 15, "macrolide" = 16, "multi" = 17, "tetracycline" = 18)

# Generate the antibiotic resistance plot
antibioticsPlot <- ggplot(antibiotica) +
  geom_tile(data = antibiotica, aes(x = gene_id, y = comparison, fill = comparison), width = Inf, height = 1, alpha = 0.5) +
  scale_fill_manual(values = object_colors) +
  geom_point(aes(x = gene_id, y = comparison, color = meanlog2FoldChange, shape = drug_class), size = 7) +
  guides(
    color = guide_legend(title = bquote(~ Log[2] ~ "fold change"), override.aes = list(size = 5)),
    fill = "none", shape = guide_legend(title = "Drug class", override.aes = list(size = 5))
  ) +
  scale_color_gradient2(low = "white", high = "red") +
  scale_shape_manual(values = drug_class_shapes) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 5, lineheight = 0.9, face = "bold"),
    axis.text.y = element_text(size = 5, lineheight = 0.9, face = "bold"),
    legend.text = element_text(size = 5, lineheight = 0.9),
    legend.title = element_text(size = 5, lineheight = 0.9),
    axis.title = element_text(size = 5, lineheight = 0.9, face = "bold"),
    plot.title = element_text(size = 5, lineheight = 0.9, face = "bold"),
    legend.box = "horizontal",
    legend.background = element_rect(fill = "#FAF9F6", linewidth = 0.5, linetype = "blank")
  ) +
  labs(
    x = "Antibiotic Resistance Genes",
    y = "Comparison"
  )

antibioticsPlot
```

# Final Plot

```{r ,fig.width=20, fig.height=25}
# Combine all plots into a final figure
plot_upper <- plot_grid(grid::grid.grabExpr(draw(upPlot)), plot_radar, rel_widths = c(1.2, 1), labels = c("A", "B"), label_size = 5, ncol = 2, scale = 0.95)
# Save the final plot
ggsave(plot = plot_radar, file.path(ComparisonPath, paste0("common_upper.tif")), dpi = 600, width = 5, height = 4, units = "cm")

plot_final <- plot_grid(plot_upper, antibioticsPlot, rel_heights = c(3, 1), labels = c("", "C"), label_size = 5, ncol = 1, scale = c(1, 0.95)) +
  theme(plot.background = element_rect(fill = "#FFFFFF", colour = NA))

# Save the final plot
ggsave(plot = plot_final, file.path(ComparisonPath, paste0("common_antibiotics.tif")), dpi = 600, width = 25, height = 20, units = "cm")
plot_final
```
